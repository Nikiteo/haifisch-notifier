openapi: 3.0.3
info:
  description: |
    Часть партнерского API Маркета, отвечающая за нотификацию внешнего API магазинов о событиях.
  title: Партнерский API Маркета (Push-нотификации)
  version: LATEST
servers:
  - url: /
paths:
  /notification:
    post:
      description: |
        Маркет отправляет магазину уведомления о событиях:

          * создание нового заказа;
          * изменение статуса заказа;
          * создание нового чата с покупателем;
          * добавление нового сообщения в чате;
          * начало спора;
          * завершение спора;
          * создание нового отзыва о товаре;
          * создание нового комментария к отзыву;
          * создание заявки на отмену заказа;
          * отмена заказа;
          * создание нового невыкупа или возврата;
          * изменение статуса невыкупа или возврата.

        {% note info "Учитывайте эти особенности в работе с уведомлениями" %}

        * Маркет может отправлять несколько уведомлений по одному и тому же событию.

            В некоторых случаях это нормальное поведение. Например, может быть несколько уведомлений с изменением статуса заказа из-за поиска курьера.

        * Время в уведомлении, в ответе на запрос к Маркету и в вашей системе может отличаться.

            Это происходит из-за того, что в момент отправки уведомления состояние заказа уже может быть другим.

            В запросе `POST notification` время события приходит в `createdAt`, `updatedAt` или `cancelledAt`. Выбор параметра зависит от типа уведомления.

        Актуальным считайте более позднее время события. Оно может быть в уведомлении, вернуться в ответе на запрос к Маркету или храниться в вашей системе.

        {% endnote %}

        Таймаут на получение ответа: 10 секунд.
      operationId: sendNotification
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendNotificationRequest'
        description: Тело запроса с уведомлением.
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendNotificationResponse'
          description: Ответ на корректный запрос с информацией об обработке уведомления.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendNotificationErrorResponse'
          description: "Если Маркет прислал некорректное уведомление, верните стат\
            ус `400` с описанием ошибки."
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SendNotificationErrorResponse'
          description: "Если произошла техническая ошибка на вашей стороне, вернит\
            е статус `500`. [{#T}](../../push-notifications/index.md#no-answer)"
      summary: Получение уведомлений
      tags:
        - notification
      x-eov-operation-handler: controllers/NotificationController
components:
  schemas:
    SendNotificationRequest:
      description: Содержимое уведомления с информацией о произошедшем событии.
      discriminator:
        mapping:
          PING: '#/components/schemas/PingNotificationDTO'
          ORDER_CREATED: '#/components/schemas/OrderCreatedNotificationDTO'
          ORDER_CANCELLED: '#/components/schemas/OrderCancelledNotificationDTO'
          ORDER_CANCELLATION_REQUEST: '#/components/schemas/OrderCancellationRequestNotificationDTO'
          ORDER_STATUS_UPDATED: '#/components/schemas/OrderStatusUpdatedNotificationDTO'
          ORDER_RETURN_CREATED: '#/components/schemas/OrderReturnCreatedNotificationDTO'
          ORDER_RETURN_STATUS_UPDATED: '#/components/schemas/OrderReturnStatusUpdatedNotificationDTO'
          GOODS_FEEDBACK_CREATED: '#/components/schemas/GoodsFeedbackCreatedNotificationDTO'
          GOODS_FEEDBACK_COMMENT_CREATED: '#/components/schemas/GoodsFeedbackCommentCreatedNotificationDTO'
          CHAT_CREATED: '#/components/schemas/ChatCreatedNotificationDTO'
          CHAT_MESSAGE_SENT: '#/components/schemas/ChatMessageSentNotificationDTO'
          CHAT_ARBITRAGE_STARTED: '#/components/schemas/ChatArbitrageStartedNotificationDTO'
          CHAT_ARBITRAGE_FINISHED: '#/components/schemas/ChatArbitrageFinishedNotificationDTO'
        propertyName: notificationType
      example:
        notificationType: PING
      oneOf:
        - $ref: '#/components/schemas/PingNotificationDTO'
        - $ref: '#/components/schemas/OrderCreatedNotificationDTO'
        - $ref: '#/components/schemas/OrderStatusUpdatedNotificationDTO'
        - $ref: '#/components/schemas/OrderCancelledNotificationDTO'
        - $ref: '#/components/schemas/OrderCancellationRequestNotificationDTO'
        - $ref: '#/components/schemas/OrderReturnCreatedNotificationDTO'
        - $ref: '#/components/schemas/OrderReturnStatusUpdatedNotificationDTO'
        - $ref: '#/components/schemas/GoodsFeedbackCreatedNotificationDTO'
        - $ref: '#/components/schemas/GoodsFeedbackCommentCreatedNotificationDTO'
        - $ref: '#/components/schemas/ChatCreatedNotificationDTO'
        - $ref: '#/components/schemas/ChatMessageSentNotificationDTO'
        - $ref: '#/components/schemas/ChatArbitrageStartedNotificationDTO'
        - $ref: '#/components/schemas/ChatArbitrageFinishedNotificationDTO'
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
      required:
        - notificationType
      type: object
    SendNotificationResponse:
      description: Ответ в случае успешной доставки уведомления.
      example:
        name: name
        time: 2000-01-23T04:56:07.000+00:00
        version: version
      properties:
        version:
          description: Версия интеграции.
          maxLength: 100
          minLength: 1
          type: string
        name:
          description: Название интеграции.
          maxLength: 100
          minLength: 1
          type: string
        time:
          description: Дата и время начала обработки уведомления в формате UTC.
          format: date-time
          type: string
      required:
        - name
        - time
        - version
      type: object
    SendNotificationErrorResponse:
      description: Обертка для ошибок при обработке уведомления.
      example:
        error:
          type: UNKNOWN
          message: message
      properties:
        error:
          $ref: '#/components/schemas/NotificationApiErrorDTO'
      type: object
    PingNotificationDTO:
      description: |
        Проверочное уведомление.

        `notificationType` = `PING`
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        time:
          description: |
            Дата и время обработки уведомления со стороны магазина.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      type: object
    OrderCreatedNotificationDTO:
      description: |
        Уведомление о создании нового заказа.

        `notificationType` = `ORDER_CREATED`

        {% note tip "Чтобы получить подробную информацию о заказе" %}

        Используйте метод [GET campaigns/{campaignId}/orders/{orderId}](../../reference/orders/getOrder.md).

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        orderId:
          description: Идентификатор заказа.
          format: int64
          type: integer
        campaignId:
          description: Идентификатор магазина.
          format: int64
          type: integer
        items:
          description: Список товаров в заказе.
          items:
            $ref: '#/components/schemas/NotificationOrderItemDTO'
          type: array
        createdAt:
          description: |
            Дата и время создания заказа.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - campaignId
        - createdAt
        - items
        - notificationType
        - orderId
      type: object
    OrderStatusUpdatedNotificationDTO:
      description: |
        Уведомление об изменении статуса заказа.

        `notificationType` = `ORDER_STATUS_UPDATED`

        {% note tip "Чтобы изменить статус заказа" %}

        Используйте метод [PUT campaigns/{campaignId}/orders/{orderId}/status](../../reference/orders/updateOrderStatus.md).

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        orderId:
          description: Идентификатор заказа.
          format: int64
          type: integer
        campaignId:
          description: Идентификатор магазина.
          format: int64
          type: integer
        status:
          $ref: '#/components/schemas/OrderStatusType'
        substatus:
          $ref: '#/components/schemas/OrderSubstatusType'
        updatedAt:
          description: |
            Дата и время изменения статуса заказа.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - campaignId
        - notificationType
        - orderId
        - status
        - substatus
        - updatedAt
      type: object
    OrderCancelledNotificationDTO:
      description: |
        Уведомление об отмене заказа.

        `notificationType` = `ORDER_CANCELLED`
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        orderId:
          description: Идентификатор заказа.
          format: int64
          type: integer
        campaignId:
          description: Идентификатор магазина.
          format: int64
          type: integer
        items:
          description: Список товаров в заказе.
          items:
            $ref: '#/components/schemas/NotificationOrderItemDTO'
          type: array
        cancelledAt:
          description: |
            Дата и время отмены заказа.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - campaignId
        - cancelledAt
        - items
        - notificationType
        - orderId
      type: object
    OrderCancellationRequestNotificationDTO:
      description: |
        Уведомление о создании заявки на отмену заказа (для DBS-магазинов).

        `notificationType` = `ORDER_CANCELLATION_REQUEST`

        {% note tip "Чтобы подтвердить или отклонить заявку" %}

        Используйте метод [PUT campaigns/{campaignId}/orders/{orderId}/cancellation/accept](../../reference/orders/acceptOrderCancellation.md).

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        orderId:
          description: Идентификатор заказа.
          format: int64
          type: integer
        campaignId:
          description: Идентификатор магазина.
          format: int64
          type: integer
        requestedAt:
          description: |
            Дата и время создания заявки на отмену заказа.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - campaignId
        - notificationType
        - orderId
        - requestedAt
      type: object
    OrderReturnCreatedNotificationDTO:
      description: |
        Уведомление о создании нового невыкупа или возврата.

        `notificationType` = `ORDER_RETURN_CREATED`

        {% note tip "Чтобы получить подробную информацию о невыкупе или возврате" %}

        Используйте метод [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        orderId:
          description: Идентификатор заказа.
          format: int64
          type: integer
        returnId:
          description: Идентификатор невыкупа или возврата.
          format: int64
          type: integer
        returnType:
          $ref: '#/components/schemas/ReturnType'
        campaignId:
          description: Идентификатор магазина.
          format: int64
          type: integer
        items:
          description: Список товаров в невыкупе или возврате.
          items:
            $ref: '#/components/schemas/NotificationReturnItemDTO'
          type: array
        createdAt:
          description: |
            Дата и время создания невыкупа или возврата.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - campaignId
        - createdAt
        - items
        - notificationType
        - orderId
        - returnId
        - returnType
      type: object
    OrderReturnStatusUpdatedNotificationDTO:
      description: |
        Уведомление о смене статуса невыкупа или возврата.

        `notificationType` = `ORDER_RETURN_STATUS_UPDATED`

        {% note tip "Чтобы получить подробную информацию о невыкупе или возврате" %}

        Используйте метод [GET campaigns/{campaignId}/orders/{orderId}/returns/{returnId}](../../reference/orders/getReturn.md).

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        orderId:
          description: Идентификатор заказа.
          format: int64
          type: integer
        returnId:
          description: Идентификатор невыкупа или возврата.
          format: int64
          type: integer
        campaignId:
          description: Идентификатор магазина.
          format: int64
          type: integer
        statuses:
          $ref: '#/components/schemas/NotificationUpdatedReturnStatusesDTO'
        updatedAt:
          description: |
            Дата и время изменения статуса невыкупа или возврата.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - campaignId
        - notificationType
        - orderId
        - returnId
        - statuses
        - updatedAt
      type: object
    GoodsFeedbackCreatedNotificationDTO:
      description: |
        Уведомление о создании нового отзыва о товаре.

        `notificationType` = `GOODS_FEEDBACK_CREATED`

        Маркет отправляет уведомления об отзывах, только когда они прошли модерацию и опубликованы.

        {% note tip "Чтобы получить подробную информацию об отзывах" %}

        Используйте метод [POST businesses/{businessId}/goods-feedback](../../reference/goods-feedback/getGoodsFeedbacks.md), где укажите их идентификаторы в параметре `feedbackIds`.

        Получить информацию не получится, если покупатель или Маркет удалил отзыв.

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        feedbackId:
          description: |
            Идентификатор отзыва.
          format: int64
          type: integer
        businessId:
          description: Идентификатор кабинета.
          format: int64
          type: integer
        createdAt:
          description: |
            Дата и время создания отзыва.

            Может отличаться от информации в `publishedAt`, так как некоторое время отзыв проходит модерацию.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
        publishedAt:
          description: |
            Дата и время публикации отзыва.

            Может отличаться от информации в `createdAt`, так как некоторое время отзыв проходит модерацию.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - businessId
        - createdAt
        - feedbackId
        - notificationType
        - publishedAt
      type: object
    GoodsFeedbackCommentCreatedNotificationDTO:
      description: |
        Уведомление о создании нового комментария к отзыву.

        `notificationType` = `GOODS_FEEDBACK_COMMENT_CREATED`

        {% note tip "Чтобы получить подробную информацию о комментариях к отзыву" %}

        Используйте метод [POST businesses/{businessId}/goods-feedback/comments](../../reference/goods-feedback/getGoodsFeedbackComments.md), где укажите их идентификаторы в параметре `commentIds`.

        Получить информацию не получится, если пользователь или Маркет удалил комментарий или отзыв, к которому он добавлен.

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        commentId:
          description: |
            Идентификатор комментария к отзыву.
          format: int64
          type: integer
        businessId:
          description: Идентификатор кабинета.
          format: int64
          type: integer
        createdAt:
          description: |
            Дата и время создания комментария.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - businessId
        - commentId
        - createdAt
        - notificationType
      type: object
    ChatCreatedNotificationDTO:
      description: |
        Уведомление о создании нового чата с покупателем.

        `notificationType` = `CHAT_CREATED`

        {% note tip "Чтобы получить чат с покупателем" %}

        Используйте метод [GET businesses/{businessId}/chat](../../reference/chats/getChat.md), где укажите идентификатор чата в параметре `chatId`.

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        chatId:
          description: Идентификатор чата.
          format: int64
          type: integer
        businessId:
          description: Идентификатор кабинета.
          format: int64
          type: integer
        createdAt:
          description: |
            Дата и время создания чата.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - businessId
        - chatId
        - createdAt
        - notificationType
      type: object
    ChatMessageSentNotificationDTO:
      description: |
        Уведомление о новом сообщении в чате.

        `notificationType` = `CHAT_MESSAGE_SENT`

        {% note tip "Чтобы получить сообщение от покупателя" %}

        Используйте метод [GET businesses/{businessId}/chats/message](../../reference/chats/getChatMessage.md), где укажите идентификаторы:

        * чата — `chatId`;
        * сообщения — `messageId`.

        {% endnote %}
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        chatId:
          description: Идентификатор чата.
          format: int64
          type: integer
        messageId:
          description: Идентификатор сообщения.
          type: string
        businessId:
          description: Идентификатор кабинета.
          format: int64
          type: integer
        sentAt:
          description: |
            Дата и время отправки сообщения.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - businessId
        - chatId
        - messageId
        - notificationType
        - sentAt
      type: object
    ChatArbitrageStartedNotificationDTO:
      description: |
        Уведомление о начале спора.

        `notificationType` = `CHAT_ARBITRAGE_STARTED`
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        chatId:
          description: Идентификатор чата.
          format: int64
          type: integer
        businessId:
          description: Идентификатор кабинета.
          format: int64
          type: integer
        startedAt:
          description: |
            Дата и время начала спора.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - businessId
        - chatId
        - notificationType
        - startedAt
      type: object
    ChatArbitrageFinishedNotificationDTO:
      description: |
        Уведомление о завершении спора.

        `notificationType` = `CHAT_ARBITRAGE_FINISHED`
      properties:
        notificationType:
          $ref: '#/components/schemas/NotificationType'
        chatId:
          description: Идентификатор чата.
          format: int64
          type: integer
        businessId:
          description: Идентификатор кабинета.
          format: int64
          type: integer
        finishedAt:
          description: |
            Дата и время завершения спора.

            Формат даты: ISO 8601 со смещением относительно UTC. Например, `2017-11-21T00:00:00.213Z`.
          format: date-time
          type: string
      required:
        - businessId
        - chatId
        - finishedAt
        - notificationType
      type: object
    NotificationType:
      description: |
        Тип уведомления:

        * `PING` — проверочное уведомление.
        * `ORDER_CREATED` — создан новый заказ.
        * `ORDER_CANCELLED` — заказ отменен.
        * `ORDER_STATUS_UPDATED` — статус заказа изменен.
        * `ORDER_RETURN_CREATED` — создан новый невыкуп или возврат.
        * `ORDER_CANCELLATION_REQUEST` — создана заявка на отмену заказа (для DBS-магазинов).
        * `ORDER_RETURN_STATUS_UPDATED` — статус невыкупа или возврата изменен.
        * `GOODS_FEEDBACK_CREATED` — создан новый отзыв о товаре.
        * `GOODS_FEEDBACK_COMMENT_CREATED` — создан новый комментарий к отзыву о товаре.
        * `CHAT_CREATED` — создан новый чат с покупателем.
        * `CHAT_MESSAGE_SENT` — добавлено новое сообщение в чате.
        * `CHAT_ARBITRAGE_STARTED` — по обращению покупателя начался спор.
        * `CHAT_ARBITRAGE_FINISHED` — спор завершен.
      enum:
        - PING
        - ORDER_CREATED
        - ORDER_CANCELLED
        - ORDER_STATUS_UPDATED
        - ORDER_RETURN_CREATED
        - ORDER_CANCELLATION_REQUEST
        - ORDER_RETURN_STATUS_UPDATED
        - GOODS_FEEDBACK_CREATED
        - GOODS_FEEDBACK_COMMENT_CREATED
        - CHAT_CREATED
        - CHAT_MESSAGE_SENT
        - CHAT_ARBITRAGE_STARTED
        - CHAT_ARBITRAGE_FINISHED
      type: string
    NotificationApiErrorDTO:
      description: Ошибка при обработке уведомления.
      example:
        type: UNKNOWN
        message: message
      properties:
        type:
          $ref: '#/components/schemas/NotificationApiErrorType'
        message:
          description: Описание ошибки.
          type: string
      type: object
    NotificationOrderItemDTO:
      description: Информация о товаре в заказе.
      properties:
        offerId:
          description: |
            Ваш SKU — идентификатор товара в вашей системе.

            Правила использования SKU:

            * У каждого товара SKU должен быть свой.

            * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.

            SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).

            [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
          maxLength: 255
          minLength: 1
          pattern: '^(?=.*\S.*)[^\x00-\x08\x0A-\x1f\x7f]{1,255}$'
          type: string
        count:
          description: Количество товара.
          type: integer
      required:
        - count
        - offerId
      type: object
    OrderStatusType:
      description: |
        Статус заказа:

        * `PLACING` — оформляется, подготовка к резервированию.

        * `RESERVED` — зарезервирован, но недооформлен.

        * `UNPAID` — оформлен, но еще не оплачен (если выбрана оплата при оформлении).

        * `PROCESSING` — находится в обработке.

        * `DELIVERY` — передан в службу доставки.

        * `PICKUP` — доставлен в пункт самовывоза.

        * `DELIVERED` — получен покупателем.

        * `CANCELLED` — отменен.

        * `PENDING` — ожидает обработки со стороны продавца.

        * `PARTIALLY_RETURNED` — возвращен частично.

        * `RETURNED` — возвращен полностью.

        * `UNKNOWN` — неизвестный статус.

        Также могут возвращаться другие значения. Обрабатывать их не требуется.
      enum:
        - PLACING
        - RESERVED
        - UNPAID
        - PROCESSING
        - DELIVERY
        - PICKUP
        - DELIVERED
        - CANCELLED
        - PENDING
        - PARTIALLY_RETURNED
        - RETURNED
        - UNKNOWN
      type: string
    OrderSubstatusType:
      description: |
        Этап обработки заказа (если он имеет статус `PROCESSING`) или причина отмены заказа (если он имеет статус `CANCELLED`).

        * Значения для заказа в статусе `PROCESSING`:

            * `STARTED` — заказ подтвержден, его можно начать обрабатывать.

            * `READY_TO_SHIP` — заказ собран и готов к отправке.

        * Значения для заказа в статусе `CANCELLED`:

            * `RESERVATION_EXPIRED` — покупатель не завершил оформление зарезервированного заказа в течение 10 минут.

            * `USER_NOT_PAID` — покупатель не оплатил заказ (для типа оплаты `PREPAID`) в течение 30 минут.

            * `USER_UNREACHABLE` — не удалось связаться с покупателем. Для отмены с этой причиной необходимо выполнить условия:

              * не менее 3 звонков с 8 до 21 в часовом поясе покупателя;
              * перерыв между первым и третьим звонком не менее 90 минут;
              * соединение не короче 5 секунд.

              Если хотя бы одно из этих условий не выполнено (кроме случая, когда номер недоступен), отменить заказ не получится. Вернется ответ с кодом ошибки 400.

            * `USER_CHANGED_MIND` — покупатель отменил заказ по личным причинам.

            * `USER_REFUSED_DELIVERY` — покупателя не устроили условия доставки.

            * `USER_REFUSED_PRODUCT` — покупателю не подошел товар.

            * `SHOP_FAILED` — магазин не может выполнить заказ.

            * `USER_REFUSED_QUALITY` — покупателя не устроило качество товара.

            * `REPLACING_ORDER` — покупатель решил заменить товар другим по собственной инициативе.

            * `PROCESSING_EXPIRED` — значение более не используется.

            * `PICKUP_EXPIRED` — закончился срок хранения заказа в ПВЗ.

            * `TOO_MANY_DELIVERY_DATE_CHANGES` — заказ переносили слишком много раз.

            * `TOO_LONG_DELIVERY` — заказ доставляется слишком долго.

        * `TECHNICAL_ERROR` — техническая ошибка на стороне Маркета. Обратитесь в поддержку.

        Также могут возвращаться другие значения. Обрабатывать их не требуется.
      enum:
        - RESERVATION_EXPIRED
        - USER_NOT_PAID
        - USER_UNREACHABLE
        - USER_CHANGED_MIND
        - USER_REFUSED_DELIVERY
        - USER_REFUSED_PRODUCT
        - SHOP_FAILED
        - USER_REFUSED_QUALITY
        - REPLACING_ORDER
        - PROCESSING_EXPIRED
        - PENDING_EXPIRED
        - SHOP_PENDING_CANCELLED
        - PENDING_CANCELLED
        - USER_FRAUD
        - RESERVATION_FAILED
        - USER_PLACED_OTHER_ORDER
        - USER_BOUGHT_CHEAPER
        - MISSING_ITEM
        - BROKEN_ITEM
        - WRONG_ITEM
        - PICKUP_EXPIRED
        - DELIVERY_PROBLEMS
        - LATE_CONTACT
        - CUSTOM
        - DELIVERY_SERVICE_FAILED
        - WAREHOUSE_FAILED_TO_SHIP
        - DELIVERY_SERIVCE_UNDELIVERED
        - DELIVERY_SERVICE_UNDELIVERED
        - PREORDER
        - AWAIT_CONFIRMATION
        - STARTED
        - PACKAGING
        - READY_TO_SHIP
        - SHIPPED
        - ASYNC_PROCESSING
        - USER_REFUSED_TO_PROVIDE_PERSONAL_DATA
        - WAITING_USER_INPUT
        - WAITING_BANK_DECISION
        - BANK_REJECT_CREDIT_OFFER
        - CUSTOMER_REJECT_CREDIT_OFFER
        - CREDIT_OFFER_FAILED
        - AWAIT_DELIVERY_DATES_CONFIRMATION
        - SERVICE_FAULT
        - DELIVERY_SERVICE_RECEIVED
        - USER_RECEIVED
        - WAITING_FOR_STOCKS
        - AS_PART_OF_MULTI_ORDER
        - READY_FOR_LAST_MILE
        - LAST_MILE_STARTED
        - ANTIFRAUD
        - DELIVERY_USER_NOT_RECEIVED
        - DELIVERY_SERVICE_DELIVERED
        - DELIVERED_USER_NOT_RECEIVED
        - USER_WANTED_ANOTHER_PAYMENT_METHOD
        - USER_RECEIVED_TECHNICAL_ERROR
        - USER_FORGOT_TO_USE_BONUS
        - RECEIVED_ON_DISTRIBUTION_CENTER
        - DELIVERY_SERVICE_NOT_RECEIVED
        - DELIVERY_SERVICE_LOST
        - SHIPPED_TO_WRONG_DELIVERY_SERVICE
        - DELIVERED_USER_RECEIVED
        - WAITING_TINKOFF_DECISION
        - COURIER_SEARCH
        - COURIER_FOUND
        - COURIER_IN_TRANSIT_TO_SENDER
        - COURIER_ARRIVED_TO_SENDER
        - COURIER_RECEIVED
        - COURIER_NOT_FOUND
        - COURIER_NOT_DELIVER_ORDER
        - COURIER_RETURNS_ORDER
        - COURIER_RETURNED_ORDER
        - WAITING_USER_DELIVERY_INPUT
        - PICKUP_SERVICE_RECEIVED
        - PICKUP_USER_RECEIVED
        - CANCELLED_COURIER_NOT_FOUND
        - COURIER_NOT_COME_FOR_ORDER
        - DELIVERY_NOT_MANAGED_REGION
        - INCOMPLETE_CONTACT_INFORMATION
        - INCOMPLETE_MULTI_ORDER
        - INAPPROPRIATE_WEIGHT_SIZE
        - TECHNICAL_ERROR
        - SORTING_CENTER_LOST
        - COURIER_SEARCH_NOT_STARTED
        - LOST
        - AWAIT_PAYMENT
        - AWAIT_LAVKA_RESERVATION
        - USER_WANTS_TO_CHANGE_ADDRESS
        - FULL_NOT_RANSOM
        - PRESCRIPTION_MISMATCH
        - DROPOFF_LOST
        - DROPOFF_CLOSED
        - DELIVERY_TO_STORE_STARTED
        - USER_WANTS_TO_CHANGE_DELIVERY_DATE
        - WRONG_ITEM_DELIVERED
        - DAMAGED_BOX
        - AWAIT_DELIVERY_DATES
        - LAST_MILE_COURIER_SEARCH
        - PICKUP_POINT_CLOSED
        - LEGAL_INFO_CHANGED
        - USER_HAS_NO_TIME_TO_PICKUP_ORDER
        - DELIVERY_CUSTOMS_ARRIVED
        - DELIVERY_CUSTOMS_CLEARED
        - FIRST_MILE_DELIVERY_SERVICE_RECEIVED
        - AWAIT_AUTO_DELIVERY_DATES
        - AWAIT_USER_PERSONAL_DATA
        - NO_PERSONAL_DATA_EXPIRED
        - CUSTOMS_PROBLEMS
        - AWAIT_CASHIER
        - WAITING_POSTPAID_BUDGET_RESERVATION
        - AWAIT_SERVICEABLE_CONFIRMATION
        - POSTPAID_BUDGET_RESERVATION_FAILED
        - AWAIT_CUSTOM_PRICE_CONFIRMATION
        - READY_FOR_PICKUP
        - TOO_MANY_DELIVERY_DATE_CHANGES
        - TOO_LONG_DELIVERY
        - UNKNOWN
      type: string
    ReturnType:
      description: |
        Тип заказа для фильтрации:

        * `UNREDEEMED` — невыкуп.

        * `RETURN` — возврат.

        Если не указывать, в ответе будут и невыкупы, и возвраты.
      enum:
        - UNREDEEMED
        - RETURN
      type: string
    NotificationReturnItemDTO:
      description: Информация о товаре в невыкупе или возврате.
      properties:
        offerId:
          description: |
            Ваш SKU — идентификатор товара в вашей системе.

            Правила использования SKU:

            * У каждого товара SKU должен быть свой.

            * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.

            SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).

            [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
          maxLength: 255
          minLength: 1
          pattern: '^(?=.*\S.*)[^\x00-\x08\x0A-\x1f\x7f]{1,255}$'
          type: string
        count:
          description: Количество товара.
          type: integer
      required:
        - count
        - offerId
      type: object
    NotificationUpdatedReturnStatusesDTO:
      description: |
        Информация об обновлении статуса невыкупа или возврата.

        Возвращается только тот статус, который был изменен.

        Для невыкупов приходит только `shipmentStatus`.

        Параметр `shipmentStatus` не приходит для возвратов с опцией **Быстрый возврат денег за дешевый брак**, когда товар остается у покупателя.
      properties:
        refundStatus:
          $ref: '#/components/schemas/RefundStatusType'
        shipmentStatus:
          $ref: '#/components/schemas/ReturnShipmentStatusType'
      type: object
    GoodsFeedbackId:
      description: |
        Идентификатор отзыва.
      format: int64
      type: integer
    GoodsFeedbackCommentId:
      description: |
        Идентификатор комментария к отзыву.
      format: int64
      type: integer
    NotificationApiErrorType:
      description: |
        Тип ошибки:

        * `UNKNOWN` — неизвестная ошибка.
        * `WRONG_EVENT_FORMAT` — неправильный тип уведомления.
        * `DUPLICATED_EVENT` — дублирующее уведомление.
      enum:
        - UNKNOWN
        - WRONG_EVENT_FORMAT
        - DUPLICATED_EVENT
      type: string
    ShopSku:
      description: |
        Ваш SKU — идентификатор товара в вашей системе.

        Правила использования SKU:

        * У каждого товара SKU должен быть свой.

        * Уже заданный SKU нельзя освободить и использовать заново для другого товара. Каждый товар должен получать новый идентификатор, до того никогда не использовавшийся в вашем каталоге.

        SKU товара можно изменить в кабинете продавца на Маркете. О том, как это сделать, читайте [в Справке Маркета для продавцов](https://yandex.ru/support2/marketplace/ru/assortment/operations/edit-sku).

        [Что такое SKU и как его назначать](https://yandex.ru/support/marketplace/assortment/add/index.html#fields)
      maxLength: 255
      minLength: 1
      pattern: '^(?=.*\S.*)[^\x00-\x08\x0A-\x1f\x7f]{1,255}$'
      type: string
    RefundStatusType:
      description: |
        Статус возврата денег:

        * `STARTED_BY_USER` — создан клиентом из личного кабинета.

        * `REFUND_IN_PROGRESS` — ждет решение о возврате денег.

        * `REFUNDED` — по возврату проведены все возвратные денежные транзакции.

        * `FAILED` — невозможно провести возврат покупателю.

        * `WAITING_FOR_DECISION` — ожидает решения.

        * `DECISION_MADE` — по возврату принято решение.

        * `REFUNDED_WITH_BONUSES` — возврат осуществлен баллами Плюса или промокодом.

        * `REFUNDED_BY_SHOP` — магазин сделал самостоятельно возврат денег.

        * `COMPLETE_WITHOUT_REFUND` — возврат денег не требуется.

        * `CANCELLED` — возврат отменен.

        * `UNKNOWN` — неизвестный статус.
      enum:
        - STARTED_BY_USER
        - REFUND_IN_PROGRESS
        - REFUNDED
        - FAILED
        - WAITING_FOR_DECISION
        - DECISION_MADE
        - REFUNDED_WITH_BONUSES
        - REFUNDED_BY_SHOP
        - CANCELLED
        - COMPLETE_WITHOUT_REFUND
        - UNKNOWN
      type: string
    ReturnShipmentStatusType:
      description: |
        Статус передачи возврата:

        * `CREATED` — возврат создан.

        * `RECEIVED` — принят у покупателя.

        * `IN_TRANSIT` — возврат в пути.

        * `READY_FOR_PICKUP` — возврат готов к выдаче магазину.

        * `PICKED` — возврат выдан магазину.

        * `LOST` — возврат утерян при транспортировке.

        * `EXPIRED` — покупатель не принес товар на возврат вовремя.

        * `CANCELLED` — возврат отменен.

        * `FULFILMENT_RECEIVED` — возврат принят на складе Маркета.

        * `PREPARED_FOR_UTILIZATION` — возврат передан в утилизацию.

        * `NOT_IN_DEMAND` — возврат не забрали с почты.

        * `UTILIZED` — возврат утилизирован.

        * `READY_FOR_EXPROPRIATION` — товары в возврате направлены на перепродажу.

        * `RECEIVED_FOR_EXPROPRIATION` — товары в возврате приняты для перепродажи.

        * `UNKNOWN` — неизвестный статус.
      enum:
        - CREATED
        - RECEIVED
        - IN_TRANSIT
        - READY_FOR_PICKUP
        - PICKED
        - LOST
        - EXPIRED
        - CANCELLED
        - FULFILMENT_RECEIVED
        - PREPARED_FOR_UTILIZATION
        - NOT_IN_DEMAND
        - UTILIZED
        - READY_FOR_EXPROPRIATION
        - RECEIVED_FOR_EXPROPRIATION
        - UNKNOWN
      type: string
