import { ConfigService } from '@nestjs/config'
import dayjs from 'dayjs'
import { AttributeType, Demand, DemandOverheadDistribution, Entity, MediaType } from 'moysklad-ts'
import { Command, Ctx, Update } from 'nestjs-telegraf'
import { Context } from 'telegraf'
import { AppLogger } from '../../shared/logger.service.js'
import { commissionTypes, fbsHfProject, fbsTopProject, states } from '../marketplace/yandex/database.js'
import { GetOrdersStatsRequest, GetOrdersStatsResponse, OrdersStatsOrderDTO } from '../marketplace/yandex/types/api.js'
import { YandexApiService } from '../marketplace/yandex/yandex.api.js'
import { MoyskladService } from '../moysklad/moysklad.service.js'

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏ –º–∞—Å—Å–∏–≤–∞ –Ω–∞ —á–∞–Ω–∫–∏
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å API –ø–æ—Ä—Ü–∏—è–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 200 –∑–∞–∫–∞–∑–æ–≤)
 */
function chunk<T>(arr: T[], size: number): T[][] {
	return Array.from({ length: Math.ceil(arr.length / size) }, (_, i) =>
		arr.slice(i * size, i * size + size))
}

/**
 * TelegramUpdate ‚Äî NestJS Update, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –≤ Telegram
 * –ö–æ–º–∞–Ω–¥–∞ /check_commissions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö –∏ –æ—Ç–≥—Ä—É–∑–∫–∞—Ö
 */
@Update()
export class TelegramUpdate {
	constructor(
		private readonly moyskladService: MoyskladService, // —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ú–æ–π–°–∫–ª–∞–¥
		private readonly api: YandexApiService, // —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ø–Ω–¥–µ–∫—Å.–ú–∞—Ä–∫–µ—Ç
		private readonly logger: AppLogger, // –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
		private readonly config: ConfigService, // –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (campaignId –∏ –¥—Ä.)
	) { }

	/**
	 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_commissions
	 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–µ—Å—è—Ü–∞
	 * –ó–∞–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö –∏ —Å—É–º–º–∞—Ä–Ω–æ –≤ –æ—Ç–≥—Ä—É–∑–∫–∞—Ö
	 */
	@Command('check_commissions')
	async checkCommissions(@Ctx() ctx: Context) {
		await ctx.reply('üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–∏—Å—Å–∏–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü...')
		const ms = this.moyskladService.getClient() // –ø–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç –ú–°

		const stores = ['Haifisch', 'Top'] as const
		for (const store of stores) {
			try {
				this.logger.log(`[${store}] üîé –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏`)

				// –ü–æ–ª—É—á–∞–µ–º campaignId –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
				const campaignId
					= store === 'Haifisch'
						? this.config.get<string>('YANDEX_CAMPAIGN_ID_HF')
						: this.config.get<string>('YANDEX_CAMPAIGN_ID_TOP')

				// –ë–µ—Ä–µ–º –∑–∞–∫–∞–∑—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1 –º–µ—Å—è—Ü
				const since = dayjs().subtract(1, 'month').format('YYYY-MM-DD')
				const { rows: recentOrders } = await ms.customerOrder.list({
					filter: {
						moment: { gt: since }, // –∑–∞–∫–∞–∑—ã –ø–æ–∑–∂–µ –¥–∞—Ç—ã
						project: {
							eq: store === 'Haifisch' ? fbsHfProject.meta.href : fbsTopProject.meta.href,
						},
						state: { eq: states.DELIVERED.meta.href }, // —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ
					},
					pagination: { limit: 1000 },
				})

				this.logger.log(`[${store}] –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${recentOrders.length}`)

				// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–æ–º–∏—Å—Å–∏–π
				const requiredAttrs = commissionTypes.map(c => c.id)

				// –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞—Ç—Ä–∏–±—É—Ç –∫–æ–º–∏—Å—Å–∏–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
				const ordersWithEmptyAttrs = recentOrders.filter(order =>
					requiredAttrs.some(attrId =>
						!order.attributes?.some(a => a.id === attrId && a.value !== null && a.value !== ''),
					),
				)

				const ordersToFetch = ordersWithEmptyAttrs.map(o => Number(o.name))

				if (ordersToFetch.length === 0) {
					await ctx.reply(`[${store}]: ‚úÖ –ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏`)
					continue
				}

				// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–∫–∞–∑–∞–º –≤ –Ø–ú API –ø–æ—Ä—Ü–∏—è–º–∏ –ø–æ 200
				const ordersStats: OrdersStatsOrderDTO[] = []
				for (const batch of chunk(ordersToFetch, 200)) {
					this.logger.log(`[${store}] –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ ${batch.length} –∑–∞–∫–∞–∑–∞–º`)
					const result = await this.api.post<GetOrdersStatsResponse, GetOrdersStatsRequest>(
						`campaigns/${campaignId}/stats/orders?limit=200`,
						store,
						{ orders: batch },
					)
					ordersStats.push(...(result.result?.orders ?? []))
				}

				// –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∑–∞–∫–∞–∑–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ –∫–æ–º–∏—Å—Å–∏–π –¥–ª—è –∞–ø–¥–µ–π—Ç–∞
				const msOrdersWithCommissions = ordersWithEmptyAttrs
					.map((orderInMs) => {
						const stats = ordersStats.find(o => o.id === Number(orderInMs.name))
						// eslint-disable-next-line ts/strict-boolean-expressions
						if (!stats?.commissions?.length)
							return null

						const commissionAttrs = stats.commissions
							.map((c) => {
								const ref = commissionTypes.find(ct => ct.type === c.type)
								if (!ref)
									return null

								// –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –≤ –ú–°
								const alreadySet = orderInMs.attributes?.some(
									a => a.id === ref.id && a.value != null && a.value !== '',
								)
								if (alreadySet)
									return null

								// –§–æ—Ä–º–∏—Ä—É–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è –∞–ø–¥–µ–π—Ç–∞
								return {
									meta: {
										href: `https://api.moysklad.ru/api/remap/1.2/entity/customerorder/metadata/attributes/${ref.id}`,
										type: Entity.AttributeMetadata,
										mediaType: MediaType.Json,
									},
									id: ref.id,
									type: AttributeType.Double,
									value: c.actual ?? 0,
								}
							})
							.filter((c): c is NonNullable<typeof c> => c !== null)

						if (!commissionAttrs.length)
							return null

						return {
							meta: orderInMs.meta,
							attributes: [...(orderInMs.attributes ?? []), ...commissionAttrs],
						}
					})
					.filter((o): o is NonNullable<typeof o> => o !== null)

				// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –ú–° –ø–∞—á–∫–æ–π
				if (msOrdersWithCommissions.length > 0) {
					// eslint-disable-next-line ts/ban-ts-comment
					// @ts-expect-error
					await ms.customerOrder.upsert(msOrdersWithCommissions)
					this.logger.log(`[${store}] –û–±–Ω–æ–≤–ª–µ–Ω–æ ${msOrdersWithCommissions.length} –∑–∞–∫–∞–∑–æ–≤`)
					await ctx.reply(`[${store}]: üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${msOrdersWithCommissions.length} –∑–∞–∫–∞–∑–æ–≤`)
				}
				else {
					this.logger.log(`[${store}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é`)
				}

				// –†–∞–±–æ—Ç–∞ —Å –æ—Ç–≥—Ä—É–∑–∫–∞–º–∏: –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≥—Ä—É–∑–∫–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
				const orderIds = recentOrders.map(o => o.name)
				const { rows: demands } = await ms.demand.list({
					filter: { name: orderIds },
					pagination: { limit: 1000 },
				})
				this.logger.log(`[${store}] –ù–∞–π–¥–µ–Ω–æ –æ—Ç–≥—Ä—É–∑–æ–∫: ${demands.length}`)

				// –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ—Ç–≥—Ä—É–∑–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å
				const shipmentsToUpdate: Pick<Demand, 'meta' | 'overhead'>[] = []
				for (const order of recentOrders) {
					// –°—á–∏—Ç–∞–µ–º —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã—Ö –∫–æ–º–∏—Å—Å–∏–π
					const commissionSum = (order.attributes ?? [])
						.filter(a => requiredAttrs.includes(a.id))
						.reduce((acc, a) => acc + (Number(a.value) || 0), 0)

					if (!commissionSum)
						continue

					// –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≥—Ä—É–∑–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–∫–∞–∑–æ–º
					const linkedDemands = demands.filter(d => d.customerOrder?.meta?.href === order.meta.href)
					if (!linkedDemands.length)
						continue

					for (const demand of linkedDemands) {
						// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—É–º–º–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –∏–ª–∏ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞
						const currentSum = demand.overhead?.sum ?? 0
						if (currentSum !== Math.round(commissionSum * 100)) {
							shipmentsToUpdate.push({
								meta: demand.meta,
								overhead: {
									sum: Math.round(commissionSum * 100),
									distribution: DemandOverheadDistribution.Price,
								},
							})
						}
					}
				}

				// –ê–ø–¥–µ–π—Ç–∏–º –æ—Ç–≥—Ä—É–∑–∫–∏ –ø–∞—á–∫–æ–π
				if (shipmentsToUpdate.length > 0) {
					this.logger.log(JSON.stringify(shipmentsToUpdate))
					const shipmentChunks = chunk(shipmentsToUpdate, 50) // —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ –ø–æ 50
					for (const [i, chunkedShipments] of shipmentChunks.entries()) {
						this.logger.log(`[${store}] –û–±–Ω–æ–≤–ª—è—é –ø–∞—á–∫—É ${i + 1}/${shipmentChunks.length} –æ—Ç–≥—Ä—É–∑–æ–∫`)
						await ms.demand.upsert(chunkedShipments)
						await ctx.reply(`[${store}]: üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${chunkedShipments.length} –æ—Ç–≥—Ä—É–∑–æ–∫ –≤ –ø–∞—á–∫–µ ${i + 1}`)
					}
				}
				else {
					this.logger.log(`[${store}] –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–≥—Ä—É–∑–æ–∫ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é`)
				}
			}
			catch (err) {
				this.logger.error(`[${store}] ‚ùå –û—à–∏–±–∫–∞: ${err instanceof Error ? err.message : String(err)}`, err as string)
				await ctx.reply(`[${store}]: ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–º–∏—Å—Å–∏–π ‚Äî —Å–º–æ—Ç—Ä–∏ –ª–æ–≥–∏`)
			}
		}

		await ctx.reply('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
	}
}
